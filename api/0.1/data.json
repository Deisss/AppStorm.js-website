{
    "project": {},
    "files": {
        "..\\git\\appstorm\\plugin\\callback.js": {
            "name": "..\\git\\appstorm\\plugin\\callback.js",
            "modules": {},
            "classes": {
                "a.callback.synchronizer": 1,
                "a.callback.chainer": 1
            },
            "fors": {},
            "namespaces": {
                "a.callback": 1
            }
        },
        "..\\git\\appstorm\\plugin\\form.js": {
            "name": "..\\git\\appstorm\\plugin\\form.js",
            "modules": {},
            "classes": {
                "a.form": 1
            },
            "fors": {},
            "namespaces": {
                "a": 1
            }
        },
        "..\\git\\appstorm\\plugin\\keyboard.js": {
            "name": "..\\git\\appstorm\\plugin\\keyboard.js",
            "modules": {},
            "classes": {
                "a.keyboard": 1
            },
            "fors": {},
            "namespaces": {
                "a": 1
            }
        },
        "..\\git\\appstorm\\plugin\\language.js": {
            "name": "..\\git\\appstorm\\plugin\\language.js",
            "modules": {},
            "classes": {
                "a.language": 1
            },
            "fors": {},
            "namespaces": {
                "a": 1
            }
        },
        "..\\git\\appstorm\\plugin\\page.js": {
            "name": "..\\git\\appstorm\\plugin\\page.js",
            "modules": {},
            "classes": {
                "a.page.template": 1,
                "a.page.event": 1,
                "a.page.event.hash": 1
            },
            "fors": {},
            "namespaces": {
                "a.page": 1,
                "a.page.event": 1
            }
        },
        "..\\git\\appstorm\\plugin\\state.js": {
            "name": "..\\git\\appstorm\\plugin\\state.js",
            "modules": {},
            "classes": {
                "a.state": 1,
                "a.state.type": 1,
                "a.state.helper.tree": 1,
                "a.state.helper.chainer": 1,
                "a.state.helper.parameter": 1
            },
            "fors": {},
            "namespaces": {
                "a": 1,
                "a.state": 1,
                "a.state.helper": 1
            }
        },
        "..\\git\\appstorm\\plugin\\storage.js": {
            "name": "..\\git\\appstorm\\plugin\\storage.js",
            "modules": {},
            "classes": {
                "a.storage": 1,
                "a.storage.type.cookie": 1,
                "a.storage.cookie": 1,
                "a.storage.type.localStorage": 1,
                "a.storage.type.globalStorage": 1,
                "a.storage.type.memory": 1,
                "a.storage.memory": 1,
                "a.storage.type.sessionStorage": 1,
                "a.storage.type.userData": 1,
                "a.storage.type.flash": 1,
                "a.storage.type.silverlight": 1,
                "a.storage.type.javafx": 1,
                "a.storage.temporary": 1,
                "a.storage.external": 1,
                "a.storage.persistent": 1
            },
            "fors": {},
            "namespaces": {
                "a": 1,
                "a.storage.type": 1,
                "a.storage": 1
            }
        },
        "..\\git\\appstorm\\a.js": {
            "name": "..\\git\\appstorm\\a.js",
            "modules": {
                "a": 1
            },
            "classes": {
                "a": 1,
                "a.console": 1,
                "a.parser.json": 1,
                "a.parser.xml": 1,
                "a.eventEmitter": 1,
                "a.message": 1,
                "a.environment": 1,
                "a.ajax": 1,
                "a.timer": 1,
                "a.loader": 1
            },
            "fors": {},
            "namespaces": {
                "a": 1,
                "a.parser": 1
            }
        }
    },
    "modules": {
        "a": {
            "name": "a",
            "submodules": {},
            "classes": {
                "a.callback.synchronizer": 1,
                "a.callback.chainer": 1,
                "a.form": 1,
                "a.keyboard": 1,
                "a.language": 1,
                "a.page.template": 1,
                "a.page.event": 1,
                "a.page.event.hash": 1,
                "a.state": 1,
                "a.state.type": 1,
                "a.state.helper.tree": 1,
                "a.state.helper.chainer": 1,
                "a.state.helper.parameter": 1,
                "a.storage": 1,
                "a.storage.type.cookie": 1,
                "a.storage.cookie": 1,
                "a.storage.type.localStorage": 1,
                "a.storage.type.globalStorage": 1,
                "a.storage.type.memory": 1,
                "a.storage.memory": 1,
                "a.storage.type.sessionStorage": 1,
                "a.storage.type.userData": 1,
                "a.storage.type.flash": 1,
                "a.storage.type.silverlight": 1,
                "a.storage.type.javafx": 1,
                "a.storage.temporary": 1,
                "a.storage.external": 1,
                "a.storage.persistent": 1,
                "a": 1,
                "a.console": 1,
                "a.parser.json": 1,
                "a.parser.xml": 1,
                "a.eventEmitter": 1,
                "a.message": 1,
                "a.environment": 1,
                "a.ajax": 1,
                "a.timer": 1,
                "a.loader": 1
            },
            "fors": {},
            "namespaces": {
                "a": 1,
                "a.parser": 1
            },
            "tag": "module",
            "file": "..\\git\\appstorm\\a.js",
            "line": 1233,
            "description": "Main AppStorm.JS object (define only the main objects here)"
        }
    },
    "classes": {
        "a.callback.synchronizer": {
            "name": "a.callback.synchronizer",
            "shortname": "a.callback.synchronizer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.callback",
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 39,
            "description": "Load many functions at same time, when they all finish raise the final callback\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:callback\">here</a>",
            "is_constructor": 1,
            "async": 1
        },
        "a.callback.chainer": {
            "name": "a.callback.chainer",
            "shortname": "a.callback.chainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.callback",
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 304,
            "description": "Load many functions one by one, when last one finish raise the final callback\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:callback\">here</a>",
            "is_constructor": 1,
            "async": 1
        },
        "a.form": {
            "name": "a.form",
            "shortname": "a.form",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a",
            "file": "..\\git\\appstorm\\plugin\\form.js",
            "line": 26,
            "description": "Manipulate HTML form by with a simple system\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:form\">here</a>",
            "static": 1
        },
        "a.keyboard": {
            "name": "a.keyboard",
            "shortname": "a.keyboard",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a",
            "file": "..\\git\\appstorm\\plugin\\keyboard.js",
            "line": 26,
            "description": "Simple wrapper for Mousetrap to have unified interface with other AppStorm.JS system\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:keyboard\">here</a>",
            "static": 1
        },
        "a.language": {
            "name": "a.language",
            "shortname": "a.language",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a",
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 29,
            "description": "Translation support for international site\nThe system allow to set on HTML tag data-tr for translate, and data-tr1, 2, 3... for variable to apply to translate\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:language\">here</a>",
            "static": 1
        },
        "a.page.template": {
            "name": "a.page.template",
            "shortname": "a.page.template",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.page",
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 46,
            "description": "Create a simple but powerfull template system\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:page\">here</a>",
            "static": 1
        },
        "a.page.event": {
            "name": "a.page.event",
            "shortname": "a.page.event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.page",
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 261,
            "description": "Catch here basic windows event : onload, onunload, onresize, onhibernate, onhash\nonHibernate is a custom event when system seems to come back from hibernate mode\nonHash is a custom event when page hash change\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:page\">here</a>",
            "static": 1,
            "itemtype": "event"
        },
        "a.page.event.hash": {
            "name": "a.page.event.hash",
            "shortname": "a.page.event.hash",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.page.event",
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 418,
            "description": "Manipulate page hash\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:page\">here</a>",
            "static": 1
        },
        "a.state": {
            "name": "a.state",
            "shortname": "a.state",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a",
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 73,
            "description": "Managing state threw this interface\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:state\">here</a>",
            "static": 1
        },
        "a.state.type": {
            "name": "a.state.type",
            "shortname": "a.state.type",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.state",
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 919,
            "description": "Allow to manage parameter object, to add custom function & co\n(like memory, temporary into variable)\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:state\">here</a>",
            "static": 1
        },
        "a.state.helper.tree": {
            "name": "a.state.helper.tree",
            "shortname": "a.state.helper.tree",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.state.helper",
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 986,
            "description": "INTERNAL USE\nTree manipulation used by state\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:state\">here</a>",
            "static": 1
        },
        "a.state.helper.chainer": {
            "name": "a.state.helper.chainer",
            "shortname": "a.state.helper.chainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.state.helper",
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 1180,
            "description": "INTERNAL USE\nRelease a chain (full state unload, or full state load)\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:state\">here</a>",
            "is_constructor": 1,
            "async": 1,
            "params": [
                {
                    "name": "type",
                    "description": "Can be \"unload\", or \"load\"",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "The path to add or delete",
                    "type": "Array"
                },
                {
                    "name": "allowed",
                    "description": "Array of id allowed into system",
                    "type": "Array"
                },
                {
                    "name": "id",
                    "description": "The unique id to be able to control system flow (too long request should be stopped)",
                    "type": "Integer"
                },
                {
                    "name": "callback",
                    "description": "On full chain finish, the callback called",
                    "type": "Function"
                }
            ]
        },
        "a.state.helper.parameter": {
            "name": "a.state.helper.parameter",
            "shortname": "a.state.helper.parameter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.state.helper",
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 1627,
            "description": "INTERNAL USE\nAllow parameter inside string system, it is used for many things : parameters inside data url, inside options, inside hashtag...\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:state\">here</a>",
            "static": 1
        },
        "a.storage": {
            "name": "a.storage",
            "shortname": "a.storage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a",
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 32,
            "description": "Storage capacities, allow to manage many storage to get quick access to everything\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:storage\">here</a>",
            "static": 1
        },
        "a.storage.type.cookie": {
            "name": "a.storage.type.cookie",
            "shortname": "a.storage.type.cookie",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.storage.type",
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 110,
            "description": "Cookie functionnality, manipulate cookie with a simplified interface\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:storage\">here</a>",
            "static": 1
        },
        "a.storage.cookie": {
            "name": "a.storage.cookie",
            "shortname": "a.storage.cookie",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.storage",
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 224,
            "description": "Cookie functionnality, manipulate cookie with a simplified interface\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:storage\">here</a>",
            "static": 1
        },
        "a.storage.type.localStorage": {
            "name": "a.storage.type.localStorage",
            "shortname": "a.storage.type.localStorage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.storage.type",
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 239,
            "description": "LocalStorage HTML5 support\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:storage\">here</a>",
            "static": 1
        },
        "a.storage.type.globalStorage": {
            "name": "a.storage.type.globalStorage",
            "shortname": "a.storage.type.globalStorage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.storage.type",
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 341,
            "description": "globalStorage HTML5 support (old)\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:storage\">here</a>",
            "static": 1
        },
        "a.storage.type.memory": {
            "name": "a.storage.type.memory",
            "shortname": "a.storage.type.memory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.storage.type",
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 447,
            "description": "memory object (so if page close, everything is lost)\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:storage\">here</a>",
            "static": 1
        },
        "a.storage.memory": {
            "name": "a.storage.memory",
            "shortname": "a.storage.memory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.storage",
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 529,
            "description": "Memory store functionnality, manipulate memory storage class with a simplified interface\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:storage\">here</a>",
            "static": 1
        },
        "a.storage.type.sessionStorage": {
            "name": "a.storage.type.sessionStorage",
            "shortname": "a.storage.type.sessionStorage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.storage.type",
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 544,
            "description": "sessionStorage HTML5 support\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:storage\">here</a>",
            "static": 1
        },
        "a.storage.type.userData": {
            "name": "a.storage.type.userData",
            "shortname": "a.storage.type.userData",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.storage.type",
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 648,
            "description": "userData IE support (old)\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:storage\">here</a>",
            "static": 1
        },
        "a.storage.type.flash": {
            "name": "a.storage.type.flash",
            "shortname": "a.storage.type.flash",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.storage.type",
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 768,
            "description": "flash external storage\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:storage\">here</a>",
            "static": 1
        },
        "a.storage.type.silverlight": {
            "name": "a.storage.type.silverlight",
            "shortname": "a.storage.type.silverlight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.storage.type",
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 929,
            "description": "silverlight external storage\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:storage\">here</a>",
            "static": 1
        },
        "a.storage.type.javafx": {
            "name": "a.storage.type.javafx",
            "shortname": "a.storage.type.javafx",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.storage.type",
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1088,
            "description": "javafx external storage\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:storage\">here</a>",
            "static": 1
        },
        "a.storage.temporary": {
            "name": "a.storage.temporary",
            "shortname": "a.storage.temporary",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.storage",
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1243,
            "description": "Select the best temp storage available\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:storage\">here</a>",
            "static": 1
        },
        "a.storage.external": {
            "name": "a.storage.external",
            "shortname": "a.storage.external",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.storage",
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1271,
            "description": "Select the best external storage available\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:storage\">here</a>",
            "static": 1
        },
        "a.storage.persistent": {
            "name": "a.storage.persistent",
            "shortname": "a.storage.persistent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.storage",
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1352,
            "description": "Select the best long term storage available\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:storage\">here</a>",
            "static": 1
        },
        "a": {
            "name": "a",
            "shortname": "a",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "",
            "file": "..\\git\\appstorm\\a.js",
            "line": 56,
            "description": "Examples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:core\">here</a>",
            "static": 1
        },
        "a.console": {
            "name": "a.console",
            "shortname": "a.console",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a",
            "file": "..\\git\\appstorm\\a.js",
            "line": 253,
            "description": "wrapper for system console, allowing to use console even if there is not console support on given browser.\nAlso, it does provide a trace utility in case of bug/check\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:core:console\">here</a>",
            "static": 1
        },
        "a.parser.json": {
            "name": "a.parser.json",
            "shortname": "a.parser.json",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.parser",
            "file": "..\\git\\appstorm\\a.js",
            "line": 423,
            "description": "Basic JSON handler wich prevent from \"no data\" or \"wrong data\" input, with a log message to check\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:core:parser\">here</a>",
            "static": 1
        },
        "a.parser.xml": {
            "name": "a.parser.xml",
            "shortname": "a.parser.xml",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a.parser",
            "file": "..\\git\\appstorm\\a.js",
            "line": 468,
            "description": "Basic XML handler wich prevent from \"no data\" or \"wrong data\" input, with a log message to check\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:core:parser\">here</a>",
            "static": 1
        },
        "a.eventEmitter": {
            "name": "a.eventEmitter",
            "shortname": "a.eventEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a",
            "file": "..\\git\\appstorm\\a.js",
            "line": 541,
            "description": "Simple hash change checker to allow creating multi-page system\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:core:message\">here</a>",
            "is_constructor": 1
        },
        "a.message": {
            "name": "a.message",
            "shortname": "a.message",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a",
            "file": "..\\git\\appstorm\\a.js",
            "line": 726,
            "description": "The bus system to exchange message globally between all application object\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:core:message\">here</a>",
            "static": 1,
            "requires": [
                "eventEmitter"
            ],
            "uses": [
                "eventEmitter"
            ]
        },
        "a.environment": {
            "name": "a.environment",
            "shortname": "a.environment",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a",
            "file": "..\\git\\appstorm\\a.js",
            "line": 751,
            "description": "Main environment data store, allow to generally define some main rules for project\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:core:environment\">here</a>",
            "static": 1
        },
        "a.ajax": {
            "name": "a.ajax",
            "shortname": "a.ajax",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a",
            "file": "..\\git\\appstorm\\a.js",
            "line": 850,
            "description": "Ajax object to call server\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:core:ajax\">here</a>",
            "is_constructor": 1,
            "async": 1,
            "params": [
                {
                    "name": "options",
                    "description": "An option map to change the behaviour of component",
                    "type": "Object"
                },
                {
                    "name": "success",
                    "description": "The success function called in case of async",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "The error function called in case of async",
                    "type": "Function"
                }
            ]
        },
        "a.timer": {
            "name": "a.timer",
            "shortname": "a.timer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a",
            "file": "..\\git\\appstorm\\a.js",
            "line": 1073,
            "description": "Timer is a class to get access to a tick timer\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:core:timer\">here</a>",
            "static": 1
        },
        "a.loader": {
            "name": "a.loader",
            "shortname": "a.loader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "a",
            "namespace": "a",
            "file": "..\\git\\appstorm\\a.js",
            "line": 1233,
            "description": "Dynamic loader for many files type\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:core:loader\">here</a>",
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 65,
            "description": "The main function when all scripts synchronize this function will raise success method\nNote : you can pass any arguments in any way, they will be sended to success function",
            "itemtype": "method",
            "name": "__done",
            "access": "private",
            "tagname": "",
            "class": "a.callback.synchronizer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 86,
            "description": "Register any error into the system, it will stop final success execution in this case\nNote : you can pass any arguments in any way, they will be sended to error function",
            "itemtype": "method",
            "name": "__error",
            "access": "private",
            "tagname": "",
            "class": "a.callback.synchronizer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 103,
            "description": "Add data to store",
            "itemtype": "method",
            "name": "__setData",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "key",
                    "description": "The key to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The content to store for given object",
                    "type": "Object"
                }
            ],
            "class": "a.callback.synchronizer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 116,
            "description": "Replace the store with given data",
            "itemtype": "method",
            "name": "__setFullData",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "The store to set",
                    "type": "Object"
                }
            ],
            "class": "a.callback.synchronizer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 130,
            "description": "Retrieve data from store",
            "itemtype": "method",
            "name": "__getData",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The value stored, or null if it's not set",
                "type": "Object | null"
            },
            "class": "a.callback.synchronizer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 142,
            "description": "Retrieve full store",
            "itemtype": "method",
            "name": "__getFullData",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The current store",
                "type": "Object"
            },
            "class": "a.callback.synchronizer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 154,
            "description": "Register success function to apply when all jobs are done",
            "itemtype": "method",
            "name": "setSuccess",
            "params": [
                {
                    "name": "success",
                    "description": "The success function to use in case of good result from all callbacks",
                    "type": "Function"
                }
            ],
            "class": "a.callback.synchronizer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 167,
            "description": "Register fail function to apply when all jobs are done",
            "itemtype": "method",
            "name": "setFail",
            "params": [
                {
                    "name": "fail",
                    "description": "The fail function to use in case of bad result from one or more callback",
                    "type": "Function"
                }
            ],
            "class": "a.callback.synchronizer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 180,
            "description": "Add a callback to existing list of callback to start",
            "itemtype": "method",
            "name": "addCallback",
            "params": [
                {
                    "name": "arguments",
                    "description": "Every arguments passed is taken as callback to add, so each arguments should be a function (you can also pass one array argument directly)",
                    "type": "Array"
                }
            ],
            "class": "a.callback.synchronizer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 219,
            "description": "Remove a function to existing list of functions to start",
            "itemtype": "method",
            "name": "removeCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "One of the function to not synchronize anymore",
                    "type": "Function"
                }
            ],
            "class": "a.callback.synchronizer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 239,
            "description": "Start the synchronizer system",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "timeout",
                    "description": "If specified (and > 0), the system will fail if this timeout (in ms) is raised...",
                    "type": "Integer | null"
                },
                {
                    "name": "args",
                    "description": "Any arguments you would like to send to all callbacks",
                    "type": "Object | null"
                }
            ],
            "class": "a.callback.synchronizer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 284,
            "description": "Check if the synchronizer is running or not",
            "itemtype": "method",
            "name": "isRunning",
            "return": {
                "description": "True the system is running, false the system is not running",
                "type": "Boolean"
            },
            "class": "a.callback.synchronizer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 329,
            "description": "Handle a callback success.\nNote : you can pass any arguments in any way, they will be sended to success function or next function",
            "itemtype": "method",
            "name": "__done",
            "access": "private",
            "tagname": "",
            "class": "a.callback.chainer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 346,
            "description": "Handle a callback error\nNote : you can pass any arguments in any way, they will be sended to error function",
            "itemtype": "method",
            "name": "__error",
            "access": "private",
            "tagname": "",
            "class": "a.callback.chainer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 359,
            "description": "Add data to store",
            "itemtype": "method",
            "name": "__setData",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "key",
                    "description": "The key to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The content to store for given object",
                    "type": "Object"
                }
            ],
            "class": "a.callback.chainer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 372,
            "description": "Replace the store with given data",
            "itemtype": "method",
            "name": "__setFullData",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "The store to set",
                    "type": "Object"
                }
            ],
            "class": "a.callback.chainer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 386,
            "description": "Retrieve data from store",
            "itemtype": "method",
            "name": "__getData",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The value stored, or null if it's not set",
                "type": "Object | null"
            },
            "class": "a.callback.chainer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 398,
            "description": "Retrieve full store",
            "itemtype": "method",
            "name": "__getFullData",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The current store",
                "type": "Object"
            },
            "class": "a.callback.chainer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 410,
            "description": "Register success function to apply when all jobs are done",
            "itemtype": "method",
            "name": "setSuccess",
            "params": [
                {
                    "name": "success",
                    "description": "The success function to use in case of good result from all callbacks",
                    "type": "Function"
                }
            ],
            "class": "a.callback.chainer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 423,
            "description": "Register fail function to apply when all jobs are done",
            "itemtype": "method",
            "name": "setFail",
            "params": [
                {
                    "name": "fail",
                    "description": "The fail function to use in case of bad result from one or more callback",
                    "type": "Function"
                }
            ],
            "class": "a.callback.chainer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 436,
            "description": "Add a callback to existing list of callback to start",
            "itemtype": "method",
            "name": "addCallback",
            "params": [
                {
                    "name": "arguments",
                    "description": "Every arguments passed is taken as callback to add, so each arguments should be a function (you can also pass one array argument directly)",
                    "type": "Array"
                }
            ],
            "class": "a.callback.chainer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 465,
            "description": "Remove a function to existing list of functions to start",
            "itemtype": "method",
            "name": "removeCallback",
            "params": [
                {
                    "name": "callback",
                    "description": "One of the function to not synchronize anymore",
                    "type": "Function"
                }
            ],
            "class": "a.callback.chainer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 490,
            "description": "Start the chainer\nNote : every arguments passed to this function will be sended to first callback functions.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "args",
                    "description": "any data to set for other callback",
                    "type": "Object | null"
                }
            ],
            "class": "a.callback.chainer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\callback.js",
            "line": 531,
            "description": "Check if the chainer is running or not",
            "itemtype": "method",
            "name": "isRunning",
            "return": {
                "description": "True the system is running, false the system is not running",
                "type": "Boolean"
            },
            "class": "a.callback.chainer",
            "namespace": "a.callback"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\form.js",
            "line": 45,
            "description": "Get the attribute from it's name",
            "itemtype": "method",
            "name": "__attr",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "el",
                    "description": "An element to get hash from",
                    "type": "DOMElement"
                },
                {
                    "name": "attr",
                    "description": "The attribute to search for that element (default : see __attr)",
                    "type": "String | null"
                }
            ],
            "return": {
                "description": "The hash tag associated (if found)",
                "type": "String | null"
            },
            "class": "a.form",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\form.js",
            "line": 59,
            "description": "Convert an HTMLCollection to array",
            "itemtype": "method",
            "name": "__htmlCollectionToArray",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "el",
                    "description": "The collection to convert",
                    "type": "HTMLCollection"
                }
            ],
            "return": {
                "description": "An array version",
                "type": "Array"
            },
            "class": "a.form",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\form.js",
            "line": 77,
            "description": "Get the field key from given input",
            "itemtype": "method",
            "name": "__getFieldKey",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "The element o search value inside",
                    "type": "DOMElement"
                }
            ],
            "return": {
                "description": "The value found",
                "type": "String"
            },
            "class": "a.form",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\form.js",
            "line": 101,
            "description": "Get the field value for given input",
            "itemtype": "method",
            "name": "__getFieldValue",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "e",
                    "description": "The element to search value inside",
                    "type": "DOMElement"
                }
            ],
            "return": {
                "description": "The value found",
                "type": "String"
            },
            "class": "a.form",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\form.js",
            "line": 121,
            "description": "From a given dom, get the list of elements inside",
            "itemtype": "method",
            "name": "__getFieldList",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "dom",
                    "description": "The dom element to search inside",
                    "type": "DOMElement"
                }
            ],
            "return": {
                "description": "The element list inside DOM",
                "type": "Array"
            },
            "class": "a.form",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\form.js",
            "line": 156,
            "description": "Raise an error on input",
            "itemtype": "method",
            "name": "__validateError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "el",
                    "description": "The element where comes from error",
                    "type": "DOMElement"
                },
                {
                    "name": "id",
                    "description": "The element id/name/class",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "The name (like min, pattern, ...) which is not valid, can be null",
                    "type": "String | null"
                },
                {
                    "name": "value",
                    "description": "The current input value (can be used as parameter",
                    "type": "String | null"
                }
            ],
            "return": {
                "description": "A validate object with everything inside if possible",
                "type": "Object"
            },
            "class": "a.form",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\form.js",
            "line": 201,
            "description": "Allow to skip HTML5 form-novalidate tag or not (boolean)",
            "itemtype": "property",
            "name": "skipNoValidate",
            "type": "Boolean",
            "default": "false",
            "class": "a.form",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\form.js",
            "line": 210,
            "description": "Get the list of element stored into given form",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "dom",
                    "description": "The dom element to search inside (basically it should be document.getElementById(\"myFormId\"))",
                    "type": "DOMElement"
                }
            ],
            "return": {
                "description": "The list of input tags existing",
                "type": "Object"
            },
            "class": "a.form",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\form.js",
            "line": 250,
            "description": "Validate a form\nNote : multiple tester (email, file) is not supported\nNote : date field (date, datetime, datetime-local, month, time, week) are not supported\nNote : tel/file field are not supported",
            "itemtype": "method",
            "name": "validate",
            "params": [
                {
                    "name": "dom",
                    "description": "The dom element to search inside (basically it should be document.getElementById(\"myFormId\"))",
                    "type": "DOMElement"
                }
            ],
            "return": {
                "description": "An array with all errors listed inside, an empty array if there is no error to show",
                "type": "Array"
            },
            "class": "a.form",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\form.js",
            "line": 374,
            "description": "Validate and get the form content",
            "itemtype": "method",
            "name": "validateAndGet",
            "params": [
                {
                    "name": "dom",
                    "description": "The dom element to search inside (basically it should be document.getElementById(\"myFormId\"))",
                    "type": "DOMElement"
                }
            ],
            "return": {
                "description": "An object with error (boolean), errorList (Array), and contentList (Array)",
                "type": "Object"
            },
            "class": "a.form",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\keyboard.js",
            "line": 53,
            "description": "Register a function for a given keypress command",
            "itemtype": "method",
            "name": "addListener",
            "params": [
                {
                    "name": "key",
                    "description": "The key/keylist to bind",
                    "type": "String"
                },
                {
                    "name": "fct",
                    "description": "The function to bind",
                    "type": "Function"
                }
            ],
            "class": "a.keyboard",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\keyboard.js",
            "line": 65,
            "description": "Remove a binding for a given key",
            "itemtype": "method",
            "name": "removeListener",
            "params": [
                {
                    "name": "key",
                    "description": "The key/keylist to unbind",
                    "type": "String"
                }
            ],
            "class": "a.keyboard",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\keyboard.js",
            "line": 76,
            "description": "Reset all bindings",
            "itemtype": "method",
            "name": "reset",
            "class": "a.keyboard",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\keyboard.js",
            "line": 85,
            "description": "Reset all bindings",
            "itemtype": "method",
            "name": "clear",
            "class": "a.keyboard",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 57,
            "description": "Get a specific hash, raw one",
            "itemtype": "method",
            "name": "__getRawTranslate",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "lang",
                    "description": "The language we want to retrieve hash from",
                    "type": "String"
                },
                {
                    "name": "hash",
                    "description": "The hash we want to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Null if there is a problem (no hash found), the hash translated if everything went fine",
                "type": "String | null"
            },
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 83,
            "description": "Convert a variable for regex util replace",
            "itemtype": "method",
            "name": "__convertVariable",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "variable",
                    "description": "The content \"hash\" which will be translated",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The ready to use regex version",
                "type": "String"
            },
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 106,
            "description": "Extract from a string the list of variables",
            "itemtype": "method",
            "name": "__extractVariableList",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "cmd",
                    "description": "The command to get",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The splitted variable list",
                "type": "Array"
            },
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 119,
            "description": "Get a specific translation from it's hash",
            "itemtype": "method",
            "name": "__getTranslate",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "hash",
                    "description": "The hash to retrieve",
                    "type": "String"
                },
                {
                    "name": "variables",
                    "description": "A list of variables to pass to system",
                    "type": "Array | null"
                }
            ],
            "return": {
                "description": "The translated string, or same string as input (+ language identifier) if nothing is found",
                "type": "String"
            },
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 179,
            "description": "Get the translate tag from an HTML element",
            "itemtype": "method",
            "name": "__getAttr",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "el",
                    "description": "An element to get hash from",
                    "type": "DOMElement"
                },
                {
                    "name": "attr",
                    "description": "The attribute to search for that element (default : see __attr)",
                    "type": "String | null"
                }
            ],
            "return": {
                "description": "The hash tag associated (if found)",
                "type": "String | null"
            },
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 201,
            "description": "Translate all possible content from a given root element (or document if element is not defined)",
            "itemtype": "method",
            "name": "__applyTranslate",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "el",
                    "description": "A root element to start searching translate element from it",
                    "type": "DOMElement"
                }
            ],
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 372,
            "description": "Set the a.language behavior",
            "params": [
                {
                    "name": "behavior",
                    "description": "The new behavior to set",
                    "type": "String"
                }
            ],
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 381,
            "description": "Get or set the a.language behavior",
            "itemtype": "method",
            "name": "getBehavior",
            "return": {
                "description": "The system behavior",
                "type": "String"
            },
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 392,
            "description": "Get the current stored language",
            "itemtype": "method",
            "name": "getCurrent",
            "return": {
                "description": "The current language, like \"en\", \"en-en\"",
                "type": "String"
            },
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 403,
            "description": "Set the language as current language",
            "itemtype": "method",
            "name": "setCurrent",
            "params": [
                {
                    "name": "lang",
                    "description": "The language to set",
                    "type": "String"
                },
                {
                    "name": "update",
                    "description": "The system should not call a new translate update",
                    "type": "Boolean"
                }
            ],
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 446,
            "description": "Get the allowed languages",
            "itemtype": "method",
            "name": "getAllowed",
            "return": {
                "description": "The list of available language setted by user",
                "type": "Array"
            },
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 457,
            "description": "Set a list of allowed languages",
            "itemtype": "method",
            "name": "setAllowed",
            "params": [
                {
                    "name": "allow",
                    "description": "The new list of languages",
                    "type": "Array | String"
                }
            ],
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 489,
            "description": "Get a specific translation from it's hash",
            "itemtype": "method",
            "name": "getSingleTranslation",
            "params": [
                {
                    "name": "hash",
                    "description": "The hash to retrieve",
                    "type": "String"
                },
                {
                    "name": "variables",
                    "description": "A list of variables to pass to system",
                    "type": "Array | null"
                }
            ],
            "return": {
                "description": "The translated string, or same string as input (+ language identifier) if nothing is found",
                "type": "String"
            },
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 502,
            "description": "Add a translation into available translation",
            "itemtype": "method",
            "name": "addSingleTranslation",
            "params": [
                {
                    "name": "lang",
                    "description": "The language to use",
                    "type": "String"
                },
                {
                    "name": "hash",
                    "description": "The hashtag to define",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The corresponding content",
                    "type": "String"
                },
                {
                    "name": "update",
                    "description": "The system should not call a new translate update",
                    "type": "Boolean"
                }
            ],
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 524,
            "description": "Append to existing dict a full list of translate",
            "itemtype": "method",
            "name": "addTranslation",
            "params": [
                {
                    "name": "lang",
                    "description": "The language to use for this translate",
                    "type": "String"
                },
                {
                    "name": "dict",
                    "description": "A dictionnary to append to existing/new language",
                    "type": "Object"
                },
                {
                    "name": "update",
                    "description": "The system should not call a new translate update",
                    "type": "Boolean"
                }
            ],
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 546,
            "description": "Get the current dict, if lang is specified, only for the given language",
            "itemtype": "method",
            "name": "getTranslation",
            "params": [
                {
                    "name": "lang",
                    "description": "The lang to get",
                    "type": "String | null"
                }
            ],
            "return": {
                "description": "The corresponding dictionnary (null if you ask a language not setted in dictionnary)",
                "type": "Object | null"
            },
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 558,
            "description": "Translate the content of an element, or translate the full page if element is not set",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "element",
                    "description": "The element to start translate from",
                    "type": "DOMElement"
                },
                {
                    "name": "update",
                    "description": "Indicate if the system should perform translate (should never been used except internally)",
                    "type": "Boolean | null"
                }
            ],
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 572,
            "description": "Add a variable to global variable store",
            "itemtype": "method",
            "name": "addVariable",
            "params": [
                {
                    "name": "key",
                    "description": "The value key",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The linked value to apply",
                    "type": "Object"
                }
            ],
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 585,
            "description": "Get a variable stored in global variable store",
            "itemtype": "method",
            "name": "getVariable",
            "params": [
                {
                    "name": "key",
                    "description": "The key to get",
                    "type": "String"
                }
            ],
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 596,
            "description": "Remove a variable from global variable store",
            "itemtype": "method",
            "name": "removeVariable",
            "params": [
                {
                    "name": "key",
                    "description": "The key to remove from global variable list",
                    "type": "String"
                }
            ],
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\language.js",
            "line": 608,
            "description": "Clear the dictionnary",
            "itemtype": "method",
            "name": "clear",
            "class": "a.language",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 56,
            "description": "Store cached template",
            "itemtype": "property",
            "name": "__tmpl",
            "type": "Object",
            "default": "{}",
            "class": "a.page.template",
            "namespace": "a.page"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 64,
            "description": "Use cache or retrieve a specific template from network",
            "itemtype": "method",
            "name": "get",
            "async": 1,
            "params": [
                {
                    "name": "uri",
                    "description": "The path to get the template, or an id if the template already listed in html",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data to apply to template",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to apply when template finish loading",
                    "type": "Function"
                },
                {
                    "name": "error",
                    "description": "The error to raise in case of problem",
                    "type": "Function | null"
                }
            ],
            "class": "a.page.template",
            "namespace": "a.page"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 95,
            "description": "Parse the content with data from client, then call callback with result",
            "itemtype": "method",
            "name": "callCallback",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "clb",
                    "description": "The callback function to call",
                    "type": "Function"
                },
                {
                    "name": "h",
                    "description": "The hash representing the unique id of template",
                    "type": "String"
                },
                {
                    "name": "d",
                    "description": "The data associated",
                    "type": "Object"
                }
            ],
            "class": "a.page.template",
            "namespace": "a.page"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 169,
            "description": "Convert an html to a dom content",
            "itemtype": "method",
            "name": "htmlToDom",
            "params": [
                {
                    "name": "html",
                    "description": "The string to parse",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The result content",
                "type": "Array"
            },
            "class": "a.page.template",
            "namespace": "a.page"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 198,
            "description": "Empty a dom element",
            "itemtype": "method",
            "name": "remove",
            "async": 1,
            "params": [
                {
                    "name": "el",
                    "description": "The element to remove everything inside",
                    "type": "DOMElement"
                },
                {
                    "name": "callback",
                    "description": "The function to raise when job is done",
                    "type": "Function | null"
                }
            ],
            "class": "a.page.template",
            "namespace": "a.page"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 216,
            "description": "Append to the given element (given a DOM element here not a jquery one)",
            "itemtype": "method",
            "name": "append",
            "async": 1,
            "params": [
                {
                    "name": "el",
                    "description": "Any dom element to append to",
                    "type": "DOMElement"
                },
                {
                    "name": "content",
                    "description": "The html content (in string) to replace",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to apply when template finish loading",
                    "type": "Function"
                }
            ],
            "class": "a.page.template",
            "namespace": "a.page"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 241,
            "description": "Same as append, just replace instead of append to element",
            "itemtype": "method",
            "name": "replace",
            "async": 1,
            "params": [
                {
                    "name": "el",
                    "description": "Any dom element to append to",
                    "type": "DOMElement"
                },
                {
                    "name": "content",
                    "description": "The html content (in string) to replace",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to apply when template finish loading",
                    "type": "Function"
                }
            ],
            "class": "a.page.template",
            "namespace": "a.page"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 291,
            "description": "Create the callback from the given event name",
            "itemtype": "method",
            "name": "__getPageEventCallback",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "event",
                    "description": "The event name",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data attached to event",
                    "type": "Object | null"
                }
            ],
            "return": {
                "description": "A ready to use callback",
                "type": "Function"
            },
            "class": "a.page.event",
            "namespace": "a.page"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 310,
            "description": "Check the system is hibernating or not",
            "itemtype": "method",
            "name": "__checkHibernate",
            "access": "private",
            "tagname": "",
            "class": "a.page.event",
            "namespace": "a.page"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 327,
            "description": "Attach a callback to a DOM event",
            "itemtype": "method",
            "name": "__attachDOMEvent",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "event",
                    "description": "The event name",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to attach",
                    "type": "Function"
                }
            ],
            "class": "a.page.event",
            "namespace": "a.page"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 356,
            "description": "Retrieve the current system hash",
            "itemtype": "method",
            "name": "__getHash",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The hash, or null if nothing is set",
                "type": "String | null"
            },
            "class": "a.page.event",
            "namespace": "a.page"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 369,
            "description": "Store the latest event appearing into a store",
            "itemtype": "method",
            "name": "__addHash",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "hash",
                    "description": "The new hash incoming",
                    "type": "String"
                }
            ],
            "class": "a.page.event",
            "namespace": "a.page"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 390,
            "description": "Check for existing hash, call the callback if there is any change",
            "itemtype": "method",
            "name": "__checkHash",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "noCallback",
                    "description": "Indicate if the system should call the callback or not",
                    "type": "Boolean"
                }
            ],
            "class": "a.page.event",
            "namespace": "a.page"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 428,
            "description": "Retrieve the current system hash",
            "itemtype": "method",
            "name": "getHash",
            "return": {
                "description": "The hash, or null if nothing is set",
                "type": "String | null"
            },
            "class": "a.page.event.hash",
            "namespace": "a.page.event"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 439,
            "description": "Get the previous page hash (can be null)",
            "itemtype": "method",
            "name": "getPreviousHash",
            "return": {
                "description": "The hash, or null if nothing is set",
                "type": "String | null"
            },
            "class": "a.page.event.hash",
            "namespace": "a.page.event"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 450,
            "description": "Force the system to set a specific hash",
            "itemtype": "method",
            "name": "setPreviousHash",
            "params": [
                {
                    "name": "value",
                    "description": "The hash to set",
                    "type": "String"
                }
            ],
            "class": "a.page.event.hash",
            "namespace": "a.page.event"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\page.js",
            "line": 462,
            "description": "Get list of existing previous hash used into system",
            "itemtype": "method",
            "name": "trace",
            "return": {
                "description": "An array with all hash done since beginning",
                "type": "Array"
            },
            "class": "a.page.event.hash",
            "namespace": "a.page.event"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 99,
            "description": "Convert anything into an array, used to convert CSS/JS, HTML, ... file listing",
            "itemtype": "method",
            "name": "__arrayConverter",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "A value to convert",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "A value converted, or dropped if it was not possible to convert",
                "type": "Array"
            },
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 117,
            "description": "Generate a unique id",
            "itemtype": "method",
            "name": "__rnd",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "A unique id, different from previous one",
                "type": "Integer"
            },
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 134,
            "description": "From a given list, keep only item appearing only once",
            "itemtype": "method",
            "name": "__extractUniqueId",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "list",
                    "description": "A list of state to select",
                    "type": "Array"
                },
                {
                    "name": "tester",
                    "description": "An extra function to use for adding selection over existing selection",
                    "type": "Function | null"
                }
            ],
            "return": {
                "description": "The extracted array of unique id",
                "type": "Array"
            },
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 168,
            "description": "From a given list, we search for maximum level (deeper child)",
            "itemtype": "method",
            "name": "__getByLevel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "list",
                    "description": "The list to find",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The system sorted by level",
                "type": "Array"
            },
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 190,
            "description": "From a given hash, select items which should be deleted (can't stay on this hash), and parent of course",
            "itemtype": "method",
            "name": "__getExternalDelete",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "hash",
                    "description": "The hashtag to search and register as delete",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An array of id to validate for delete",
                "type": "Array"
            },
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 240,
            "description": "From a given hash, generate a function which select an item (or not) regarding it's hash code (including template system)",
            "itemtype": "method",
            "name": "__getTreeHashTester",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "hash",
                    "description": "Any hashtag to search",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The function ready to use inside tree helper",
                "type": "Function"
            },
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 278,
            "description": "From a given id, generate a function which select an item (or not) regarding it's id",
            "itemtype": "method",
            "name": "__getTreeIdTester",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "id",
                    "description": "Any id to search",
                    "type": "String | Integer | Array"
                }
            ],
            "return": {
                "description": "The function ready to use inside tree helper",
                "type": "Function"
            },
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 301,
            "description": "Allow to select item regarding both hashtag, or exist as id",
            "itemtype": "method",
            "name": "__getTreeHashAndIdTester",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "hash",
                    "description": "The hashtag to check",
                    "type": "String"
                },
                {
                    "name": "idList",
                    "description": "The id list to check",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The function ready to use inside tree helper",
                "type": "Function"
            },
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 323,
            "description": "This function try to find children for a given object, it is directly used by system (does not return any function)",
            "itemtype": "method",
            "name": "__getTreeFiller",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "item",
                    "description": "Should be a state",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An item list, or empty list if nothing if found",
                "type": "Array"
            },
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 336,
            "description": "Filter an element to extract data, it is directly used by system (does not return any function)",
            "itemtype": "method",
            "name": "__getTreeConverterId",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "item",
                    "description": "Should be a state",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The id found",
                "type": "Integer"
            },
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 349,
            "description": "Filter an element to extract data, it is directly used by system (does not return any function)",
            "itemtype": "method",
            "name": "__getTreeConverterError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "item",
                    "description": "Should be a state",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The id found",
                "type": "Integer"
            },
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 367,
            "description": "Main process function",
            "itemtype": "method",
            "name": "__proceed",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "Object from hash event, contains value (current hash) and old (previous hash)",
                    "type": "Object"
                }
            ],
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 481,
            "description": "Erase the full state tree stored",
            "itemtype": "method",
            "name": "clear",
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 490,
            "description": "Get a copy of current tree stored into system",
            "itemtype": "method",
            "name": "tree",
            "return": {
                "description": "A clone of current stored object",
                "type": "Array"
            },
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 501,
            "description": "Register a state",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "ctrl",
                    "description": "A state (see create function from a.state) to register",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "A callback to call after add, ONLY if loadOnStartup is defined",
                    "type": "Function | null"
                }
            ],
            "return": {
                "description": "The control id setted, or a null value if we could not add state",
                "type": "String | null"
            },
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 638,
            "description": "Get an element regarding it's id",
            "itemtype": "method",
            "name": "getById",
            "params": [
                {
                    "name": "id",
                    "description": "The id to find in list",
                    "type": "String | Integer"
                }
            ],
            "return": {
                "description": "The result content",
                "type": "Object | null"
            },
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 650,
            "description": "Remove an element regarding it's id",
            "itemtype": "method",
            "name": "removeById",
            "params": [
                {
                    "name": "id",
                    "description": "The id to find in list",
                    "type": "String | Integer"
                }
            ],
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 672,
            "description": "From a given id, load a state without modify hashtag, and allow controller to stay alive on specific hashtag given",
            "itemtype": "method",
            "name": "loadById",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The controller id to load",
                    "type": "String | Integer"
                },
                {
                    "name": "hashtagList",
                    "description": "The hastag to let it stay alive",
                    "type": "Array | null"
                },
                {
                    "name": "callback",
                    "description": "callback function after loading ends",
                    "type": "Function | null"
                }
            ],
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 724,
            "description": "From a given id, unload from this id, including all children\nNOTE : only item created with loadById can be deleted using this function",
            "itemtype": "method",
            "name": "unloadById",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The controller to unload",
                    "type": "String | Integer"
                },
                {
                    "name": "callback",
                    "description": "callback function after unloading ends",
                    "type": "Function | null"
                }
            ],
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 755,
            "description": "Ask to reload an id, and all children",
            "itemtype": "method",
            "name": "forceReloadById",
            "async": 1,
            "params": [
                {
                    "name": "id",
                    "description": "The id to force reload",
                    "type": "String | Integer"
                },
                {
                    "name": "callback",
                    "description": "callback function after unloading and loading ends",
                    "type": "Function | null"
                }
            ],
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 828,
            "description": "Test a given hash got at least one children using it",
            "itemtype": "method",
            "name": "hashExists",
            "params": [
                {
                    "name": "hash",
                    "description": "The hashtag to search",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True the hash is defined and does exist, false in other case",
                "type": "Boolean"
            },
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 845,
            "description": "INTERNAL USE ONLY\nGet the unique id currently used",
            "itemtype": "method",
            "name": "__currentGeneratedId",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The current id",
                "type": "Integer"
            },
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 858,
            "description": "INTERNAL USE ONLY\nGet the error associated to a given status error and state",
            "itemtype": "method",
            "name": "__getError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "state",
                    "description": "The state related",
                    "type": "Object"
                },
                {
                    "name": "status",
                    "description": "The status error code to retrieve",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "Any revelant data...",
                "type": "Mixed"
            },
            "class": "a.state",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 930,
            "description": "Add a custom type to existing parameter system\n\nExamples: <a href=\"http://appstormjs.com/wiki/doku.php?id=appstorm.js_v0.1:plugins:state\">here</a>",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "id",
                    "description": "The id to register (like myHandler, ...)",
                    "type": "String"
                },
                {
                    "name": "fct",
                    "description": "The function to bind to this hash (null to erase)",
                    "type": "Function"
                }
            ],
            "class": "a.state.type",
            "namespace": "a.state"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 944,
            "description": "Get a stored custom parameter function",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "The corresponding id to search",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The founded function or null if something happens",
                "type": "Function | null"
            },
            "class": "a.state.type",
            "namespace": "a.state"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 959,
            "description": "Get the full list of parameters types stored by user",
            "itemtype": "method",
            "name": "list",
            "return": {
                "description": "The parameter list",
                "type": "Object"
            },
            "class": "a.state.type",
            "namespace": "a.state"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 997,
            "description": "Flat a tree structure into an array one...\nEx filler (must return an array, so send back empty array in case of problem) :\nfunction(item){return item.children;}\nEx converter (must return something, even null) :\nfunction(item){return item.id;}",
            "itemtype": "method",
            "name": "flat",
            "params": [
                {
                    "name": "tree",
                    "description": "A tree structure to transform",
                    "type": "Array"
                },
                {
                    "name": "filler",
                    "description": "From an item, give back the potential list of children to add...",
                    "type": "Function"
                },
                {
                    "name": "converter",
                    "description": "Used to transform every items before they get into array",
                    "type": "Function | null"
                }
            ],
            "return": {
                "description": "A flatten modified array",
                "type": "Array"
            },
            "class": "a.state.helper.tree",
            "namespace": "a.state.helper"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 1034,
            "description": "Recursive search inside tree to find the first good element\nEx : tester (id come from other scope) :\nfunction(item){if(item.id === id){return true;}; return false;}\nEx : filler (must return an array, so send back empty array in case of problem) :\nfunction(item){return item.children;}",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "tree",
                    "description": "A tree structure to search inside",
                    "type": "Array"
                },
                {
                    "name": "filler",
                    "description": "From an item, give back the potential list of children to search inside...",
                    "type": "Function"
                },
                {
                    "name": "tester",
                    "description": "The function to test if item is the good one or not",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An object selected, or null if no item found",
                "type": "Object | null"
            },
            "class": "a.state.helper.tree",
            "namespace": "a.state.helper"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 1067,
            "description": "Check if the given tester found in the given tree",
            "see": [
                "getItem (used internally)"
            ],
            "itemtype": "method",
            "name": "isInBranch",
            "params": [
                {
                    "name": "tree",
                    "description": "A tree structure to search inside",
                    "type": "Array"
                },
                {
                    "name": "filler",
                    "description": "From an item, give back the potential list of children to search inside...",
                    "type": "Function"
                },
                {
                    "name": "tester",
                    "description": "The function to test if item is the good one or not",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "True if the selected item is in given tree, false in other case",
                "type": "Boolean"
            },
            "class": "a.state.helper.tree",
            "namespace": "a.state.helper"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 1083,
            "description": "Keep only branch where specific item appears\nNote : there is no return value because tree will be modified as a \"pointed tree\", so use tree after.\nNote : If you need to keep original tree, you need to duplicate the tree before using this function (use a.clone for that)\nEx : tester (hash come from other scope) :\nfunction(item){if(item.hash === hash || item.hash === \"*\"){return true;}; return false;}\nEx : filler (must return an array, so send back empty array in case of problem) :\nfunction(item){return item.children;}",
            "itemtype": "method",
            "name": "selectBranch",
            "params": [
                {
                    "name": "tree",
                    "description": "A tree structure to select inside",
                    "type": "Array"
                },
                {
                    "name": "filler",
                    "description": "From an item, give back the potential list of children to search inside...",
                    "type": "Function"
                },
                {
                    "name": "tester",
                    "description": "The function to test if item is the good one or not",
                    "type": "Function"
                }
            ],
            "class": "a.state.helper.tree",
            "namespace": "a.state.helper"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 1125,
            "description": "Get the given level inside a tree structure : example \n1 =>\n  2 =>\n    4 => \"something\"\n  3 =>\n    5 => \"something\"\n\nIf we want level 1, we get array [2, 3] (and 2, 3 contains 4, 5), if we want level 2, we get [4, 5] (nothing inside).\nThis function is used to know loading/unloading sequence priority (we must unload 4 before 2, we must load 3 before 5...)",
            "itemtype": "method",
            "name": "selectLevel",
            "params": [
                {
                    "name": "tree",
                    "description": "A tree structure to select inside",
                    "type": "Array"
                },
                {
                    "name": "filler",
                    "description": "From an item, give back the potential list of children to search inside...",
                    "type": "Function"
                },
                {
                    "name": "level",
                    "description": "The level we are searching for",
                    "type": "Integer"
                }
            ],
            "class": "a.state.helper.tree",
            "namespace": "a.state.helper"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 1204,
            "description": "Handle a chain error",
            "itemtype": "method",
            "name": "__error",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "resource",
                    "description": "The uri which fail to load",
                    "type": "String"
                },
                {
                    "name": "status",
                    "description": "The error status (like 404)",
                    "type": "String"
                }
            ],
            "class": "a.state.helper.chainer",
            "namespace": "a.state.helper"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 1239,
            "description": "start level callback function.\nThis is used to not have outside scope problem.",
            "itemtype": "method",
            "name": "__generateStartLevelCallback",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "level",
                    "description": "The current level to perform",
                    "type": "Array"
                }
            ],
            "class": "a.state.helper.chainer",
            "namespace": "a.state.helper"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 1252,
            "description": "Create a callback function for loader system",
            "itemtype": "method",
            "name": "__generateDefaultLoader",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "fct",
                    "description": "The loader function used",
                    "type": "Function"
                },
                {
                    "name": "uri",
                    "description": "The uri to load",
                    "type": "String"
                },
                {
                    "name": "extra",
                    "description": "The extra parsing function (may be needed)",
                    "type": "Function | null"
                }
            ],
            "class": "a.state.helper.chainer",
            "namespace": "a.state.helper"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 1273,
            "description": "Replace every needed content with data stored",
            "itemtype": "method",
            "name": "__parseOptions",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "name",
                    "description": "The name to give to data",
                    "type": "String | null"
                },
                {
                    "name": "internal",
                    "description": "The hash (internal one with param definition)",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The data parameter for calling ajax request",
                    "type": "Object"
                }
            ],
            "class": "a.state.helper.chainer",
            "namespace": "a.state.helper"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 1292,
            "description": "Specific data loading for data parameter",
            "itemtype": "method",
            "name": "__generateDefaultDataLoader",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "name",
                    "description": "The name to give to data",
                    "type": "String | null"
                },
                {
                    "name": "data",
                    "description": "The data url to load",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The data parameter for calling ajax request",
                    "type": "Object"
                },
                {
                    "name": "internal",
                    "description": "The hash (internal one with param definition)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The function to use for loading data",
                "type": "Function"
            },
            "class": "a.state.helper.chainer",
            "namespace": "a.state.helper"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 1363,
            "description": "From a list of url, load every resource",
            "itemtype": "method",
            "name": "__generateLoader",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "state",
                    "description": "The state object with all needed data inside to perform scan",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to call when load is finished",
                    "type": "Function"
                }
            ],
            "class": "a.state.helper.chainer",
            "namespace": "a.state.helper"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 1496,
            "description": "Start a state chain (unload, or load chain)",
            "itemtype": "method",
            "name": "__startState",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "state",
                    "description": "A state to start",
                    "type": "Object"
                },
                {
                    "name": "clb",
                    "description": "The callback to apply on success (or fail)",
                    "type": "Function"
                }
            ],
            "class": "a.state.helper.chainer",
            "namespace": "a.state.helper"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 1573,
            "description": "Unload a full state level",
            "itemtype": "method",
            "name": "__startLevel",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "stateList",
                    "description": "A list of state to delete",
                    "type": "Array"
                },
                {
                    "name": "clb",
                    "description": "The callback to apply on success (or fail)",
                    "type": "Function"
                }
            ],
            "class": "a.state.helper.chainer",
            "namespace": "a.state.helper"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 1638,
            "description": "From a given string, we extract parameter inside",
            "itemtype": "method",
            "name": "extract",
            "params": [
                {
                    "name": "str",
                    "description": "The string to extract param from",
                    "type": "String"
                },
                {
                    "name": "customReg",
                    "description": "A new regex to replace current one",
                    "type": "RegExp"
                }
            ],
            "return": {
                "description": "An array with every element as object key : name (the key name), regex (the linked regex), start (integer) as content",
                "type": "Array"
            },
            "class": "a.state.helper.parameter",
            "namespace": "a.state.helper"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 1688,
            "description": "Replace a parameter at a specific position",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "str",
                    "description": "The string to use as replacement",
                    "type": "String"
                },
                {
                    "name": "param",
                    "description": "An extracted parameter from extract function",
                    "type": "Object"
                },
                {
                    "name": "custom",
                    "description": "A custom string to add to system",
                    "type": "String | null"
                }
            ],
            "return": {
                "description": "The string replaced with new content",
                "type": "String"
            },
            "class": "a.state.helper.parameter",
            "namespace": "a.state.helper"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\state.js",
            "line": 1703,
            "description": "Replace inside a given str, the parameters found in internal, by value found in hash",
            "itemtype": "method",
            "name": "extrapolate",
            "params": [
                {
                    "name": "str",
                    "description": "The string to replace parameters inside",
                    "type": "String"
                },
                {
                    "name": "hash",
                    "description": "The current system hash",
                    "type": "String"
                },
                {
                    "name": "internal",
                    "description": "The hashtag stored internally (with parameters)",
                    "type": "String"
                },
                {
                    "name": "replace",
                    "description": "Indicate if system should use replace or directly send back data (default : true)",
                    "type": "Boolean | null"
                }
            ],
            "class": "a.state.helper.parameter",
            "namespace": "a.state.helper"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 42,
            "description": "Debug on console the get item action",
            "itemtype": "method",
            "name": "__printGetItem",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "element",
                    "description": "The element (like cookie, localStorage, ...)",
                    "type": "String"
                },
                {
                    "name": "key",
                    "description": "The key to debug",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to dump",
                    "type": "Mixed"
                }
            ],
            "class": "a.storage",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 58,
            "description": "Debug on console the get item error action",
            "itemtype": "method",
            "name": "__printGetErrorItem",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "element",
                    "description": "The element (like cookie, localStorage, ...)",
                    "type": "String"
                },
                {
                    "name": "key",
                    "description": "The key to debug",
                    "type": "String"
                }
            ],
            "class": "a.storage",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 73,
            "description": "Debug on console the set item action",
            "itemtype": "method",
            "name": "__printSetItem",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "element",
                    "description": "The element (like cookie, localStorage, ...)",
                    "type": "String"
                },
                {
                    "name": "key",
                    "description": "The key to debug",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to dump",
                    "type": "Mixed"
                }
            ],
            "class": "a.storage",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 89,
            "description": "Debug on console the remove item action",
            "itemtype": "method",
            "name": "__printRemoveItem",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "element",
                    "description": "The element (like cookie, localStorage, ...)",
                    "type": "String"
                },
                {
                    "name": "key",
                    "description": "The key to debug",
                    "type": "String"
                }
            ],
            "class": "a.storage",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 127,
            "itemtype": "property",
            "name": "support",
            "type": "Boolean",
            "default": "false",
            "class": "a.storage.type.cookie",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 133,
            "itemtype": "property",
            "name": "engine",
            "type": "String",
            "default": "cookie",
            "final": 1,
            "class": "a.storage.type.cookie",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 140,
            "description": "Set a new cookie, or delete a cookie using a too old expires",
            "itemtype": "method",
            "name": "setItem",
            "params": [
                {
                    "name": "name",
                    "description": "The key to use",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to store",
                    "type": "Mixed"
                },
                {
                    "name": "days",
                    "description": "Number of days before expires",
                    "type": "Integer"
                }
            ],
            "class": "a.storage.type.cookie",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 160,
            "description": "Get the stored cookie, return null if something went wrong",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "name",
                    "description": "The cookie name stored",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Any data stored inside cookie",
                "type": "Mixed"
            },
            "class": "a.storage.type.cookie",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 186,
            "description": "Remove a previously stored cookie",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "name",
                    "description": "The cookie name to delete",
                    "type": "String"
                }
            ],
            "class": "a.storage.type.cookie",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 268,
            "itemtype": "property",
            "name": "support",
            "type": "Boolean",
            "default": "false",
            "class": "a.storage.type.localStorage",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 274,
            "itemtype": "property",
            "name": "engine",
            "type": "String",
            "default": "localStorage",
            "final": 1,
            "class": "a.storage.type.localStorage",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 281,
            "description": "Get the stored key",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value in case of success, null if not found",
                "type": "Mixed | null"
            },
            "class": "a.storage.type.localStorage",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 302,
            "description": "Store a new key/value pair",
            "itemtype": "method",
            "name": "setItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The data to add",
                    "type": "Mixed"
                }
            ],
            "class": "a.storage.type.localStorage",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 320,
            "description": "Remove a given key from store",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to remove",
                    "type": "String"
                }
            ],
            "class": "a.storage.type.localStorage",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 368,
            "itemtype": "property",
            "name": "support",
            "type": "Boolean",
            "default": "false",
            "class": "a.storage.type.globalStorage",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 374,
            "itemtype": "property",
            "name": "engine",
            "type": "String",
            "default": "globalStorage",
            "final": 1,
            "class": "a.storage.type.globalStorage",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 381,
            "description": "Get the stored key",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value in case of success, null if not found",
                "type": "Mixed | null"
            },
            "class": "a.storage.type.globalStorage",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 408,
            "description": "Store a new key/value pair",
            "itemtype": "method",
            "name": "setItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The data to add",
                    "type": "Mixed"
                }
            ],
            "class": "a.storage.type.globalStorage",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 426,
            "description": "Remove a given key from store",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to remove",
                    "type": "String"
                }
            ],
            "class": "a.storage.type.globalStorage",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 462,
            "itemtype": "property",
            "name": "support",
            "type": "Boolean",
            "default": "true",
            "class": "a.storage.type.memory",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 468,
            "itemtype": "property",
            "name": "engine",
            "type": "String",
            "default": "memory",
            "final": 1,
            "class": "a.storage.type.memory",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 475,
            "description": "Get the stored key",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value in case of success, null if not found",
                "type": "Mixed | null"
            },
            "class": "a.storage.type.memory",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 493,
            "description": "Store a new key/value pair",
            "itemtype": "method",
            "name": "setItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The data to add",
                    "type": "Mixed"
                }
            ],
            "class": "a.storage.type.memory",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 509,
            "description": "Remove a given key from store",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to remove",
                    "type": "String"
                }
            ],
            "class": "a.storage.type.memory",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 574,
            "itemtype": "property",
            "name": "support",
            "type": "Boolean",
            "default": "false",
            "class": "a.storage.type.sessionStorage",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 580,
            "itemtype": "property",
            "name": "engine",
            "type": "String",
            "default": "sessionStorage",
            "final": 1,
            "class": "a.storage.type.sessionStorage",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 587,
            "description": "Get the stored key",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value in case of success, null if not found",
                "type": "Mixed | null"
            },
            "class": "a.storage.type.sessionStorage",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 608,
            "description": "Store a new key/value pair",
            "itemtype": "method",
            "name": "setItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The data to add",
                    "type": "Mixed"
                }
            ],
            "class": "a.storage.type.sessionStorage",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 626,
            "description": "Remove a given key from store",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to remove",
                    "type": "String"
                }
            ],
            "class": "a.storage.type.sessionStorage",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 694,
            "itemtype": "property",
            "name": "support",
            "type": "Boolean",
            "default": "false",
            "class": "a.storage.type.userData",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 700,
            "itemtype": "property",
            "name": "engine",
            "type": "String",
            "default": "userData",
            "final": 1,
            "class": "a.storage.type.userData",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 707,
            "description": "Get the stored key",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value in case of success, null if not found",
                "type": "Mixed | null"
            },
            "class": "a.storage.type.userData",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 727,
            "description": "Store a new key/value pair",
            "itemtype": "method",
            "name": "setItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The data to add",
                    "type": "Mixed"
                }
            ],
            "class": "a.storage.type.userData",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 746,
            "description": "Remove a given key from store",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to remove",
                    "type": "String"
                }
            ],
            "class": "a.storage.type.userData",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 784,
            "description": "Start flash and check availability",
            "itemtype": "method",
            "name": "__startFlash",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function to call after loading",
                    "type": "Function | null"
                }
            ],
            "class": "a.storage.type.flash",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 834,
            "description": "Get the support state of flash.\nNote: it may arrive little bit after using start function...",
            "itemtype": "method",
            "name": "support",
            "return": {
                "description": "True if support is active, false in other cases",
                "type": "Boolean"
            },
            "class": "a.storage.type.flash",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 843,
            "description": "Get the ready state of flash object",
            "itemtype": "method",
            "name": "ready",
            "return": {
                "description": "True if it's ready, false in other cases",
                "type": "Boolean"
            },
            "class": "a.storage.type.flash",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 851,
            "itemtype": "property",
            "name": "engine",
            "type": "String",
            "default": "flash",
            "final": 1,
            "class": "a.storage.type.flash",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 859,
            "description": "Start (include and prepare) flash object\nNote: automatically done by system you don't need to...",
            "itemtype": "method",
            "name": "start",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call in case of success",
                    "type": "Function"
                }
            ],
            "class": "a.storage.type.flash",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 872,
            "description": "Get the stored key",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value in case of success, null if not found",
                "type": "Mixed | null"
            },
            "class": "a.storage.type.flash",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 894,
            "description": "Store a new key/value pair",
            "itemtype": "method",
            "name": "setItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The data to add",
                    "type": "Mixed"
                }
            ],
            "class": "a.storage.type.flash",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 910,
            "description": "Remove a given key from store",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to remove",
                    "type": "String"
                }
            ],
            "class": "a.storage.type.flash",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 945,
            "description": "Start silverlight and check availability",
            "itemtype": "method",
            "name": "__startSilverlight",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function to call after loading",
                    "type": "Function | null"
                }
            ],
            "class": "a.storage.type.silverlight",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 992,
            "description": "Get the support state of silverlight.\nNote: it may arrive little bit after using start function...",
            "itemtype": "method",
            "name": "support",
            "return": {
                "description": "True if support is active, false in other cases",
                "type": "Boolean"
            },
            "class": "a.storage.type.silverlight",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1001,
            "description": "Get the ready state of silverlight object",
            "itemtype": "method",
            "name": "ready",
            "return": {
                "description": "True if it's ready, false in other cases",
                "type": "Boolean"
            },
            "class": "a.storage.type.silverlight",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1009,
            "itemtype": "property",
            "name": "engine",
            "type": "String",
            "default": "silverlight",
            "final": 1,
            "class": "a.storage.type.silverlight",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1017,
            "description": "Start (include and prepare) silverlight object\nNote: automatically done by system you don't need to...",
            "itemtype": "method",
            "name": "start",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call in case of success",
                    "type": "Function"
                }
            ],
            "class": "a.storage.type.silverlight",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1030,
            "description": "Get the stored key",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value in case of success, null if not found",
                "type": "Mixed | null"
            },
            "class": "a.storage.type.silverlight",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1053,
            "description": "Store a new key/value pair",
            "itemtype": "method",
            "name": "setItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The data to add",
                    "type": "Mixed"
                }
            ],
            "class": "a.storage.type.silverlight",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1069,
            "description": "Remove a given key from store",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to remove",
                    "type": "String"
                }
            ],
            "class": "a.storage.type.silverlight",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1104,
            "description": "Start javaFX and check availability",
            "itemtype": "method",
            "name": "__startJavaFX",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The callback function to call after loading",
                    "type": "Function | null"
                }
            ],
            "class": "a.storage.type.javafx",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1140,
            "description": "Get the support state of javafx.\nNote: it may arrive little bit after using start function...",
            "itemtype": "method",
            "name": "support",
            "return": {
                "description": "True if support is active, false in other cases",
                "type": "Boolean"
            },
            "class": "a.storage.type.javafx",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1149,
            "description": "Get the ready state of javafx object",
            "itemtype": "method",
            "name": "ready",
            "return": {
                "description": "True if it's ready, false in other cases",
                "type": "Boolean"
            },
            "class": "a.storage.type.javafx",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1157,
            "itemtype": "property",
            "name": "engine",
            "type": "String",
            "default": "javafx",
            "final": 1,
            "class": "a.storage.type.javafx",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1165,
            "description": "Start (include and prepare) javafx object\nNote: automatically done by system you don't need to...",
            "itemtype": "method",
            "name": "start",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call in case of success",
                    "type": "Function"
                }
            ],
            "class": "a.storage.type.javafx",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1178,
            "description": "Get the stored key",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value in case of success, null if not found",
                "type": "Mixed | null"
            },
            "class": "a.storage.type.javafx",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1201,
            "description": "Store a new key/value pair",
            "itemtype": "method",
            "name": "setItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The data to add",
                    "type": "Mixed"
                }
            ],
            "class": "a.storage.type.javafx",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1217,
            "description": "Remove a given key from store",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "key",
                    "description": "The key to remove",
                    "type": "String"
                }
            ],
            "class": "a.storage.type.javafx",
            "namespace": "a.storage.type"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1283,
            "description": "Start the callback function if possible",
            "itemtype": "method",
            "name": "__startCallback",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The object to use for external",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function to launch if a store has been found",
                    "type": "Function | null"
                }
            ],
            "class": "a.storage.external",
            "namespace": "a.storage"
        },
        {
            "file": "..\\git\\appstorm\\plugin\\storage.js",
            "line": 1307,
            "description": "Start the external tool, try to find an available store",
            "itemtype": "method",
            "name": "start",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The function to launch if a store has been found",
                    "type": "Function | null"
                }
            ],
            "class": "a.storage.external",
            "namespace": "a.storage"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 63,
            "description": "The core url (for vendor loading)",
            "itemtype": "property",
            "name": "url",
            "type": "String",
            "class": "a",
            "module": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 71,
            "description": "The value exist in given object/array",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "obj",
                    "description": "A collection to search in",
                    "type": "Array | Object"
                }
            ],
            "value": "{Mixed} The value to search",
            "class": "a",
            "module": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 93,
            "description": "Duplicate a state (used internally)\nFROM : http://www.xenoveritas.org/blog/xeno/the-correct-way-to-clone-javascript-arrays\nCredits to them ! Little bug corrected :p",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "obj",
                    "description": "A state object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new state object",
                "type": "Object"
            },
            "class": "a",
            "module": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 133,
            "description": "Check a variable is a number",
            "itemtype": "method",
            "name": "isNumber",
            "params": [
                {
                    "name": "o",
                    "description": "The variable to check",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "True if it's a number, false in other cases",
                "type": "Boolean"
            },
            "class": "a",
            "module": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 145,
            "description": "Check a variable is an object",
            "itemtype": "method",
            "name": "isObject",
            "params": [
                {
                    "name": "o",
                    "description": "The variable to check",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "True if it's an object, false in other cases",
                "type": "Boolean"
            },
            "class": "a",
            "module": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 157,
            "description": "Check a variable is a string",
            "itemtype": "method",
            "name": "isString",
            "params": [
                {
                    "name": "s",
                    "description": "The variable to check",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "True if it's a string, false in other cases",
                "type": "Boolean"
            },
            "class": "a",
            "module": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 169,
            "description": "Check a variable is a function",
            "itemtype": "method",
            "name": "isFunction",
            "params": [
                {
                    "name": "s",
                    "description": "The variable to check",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "True if it's a function, false in other cases",
                "type": "Boolean"
            },
            "class": "a",
            "module": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 181,
            "description": "Test a variable is undefined or null",
            "itemtype": "method",
            "name": "isNull",
            "params": [
                {
                    "name": "u",
                    "description": "The variable to check",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "True if it's a undefined variable, false in other cases",
                "type": "Boolean"
            },
            "class": "a",
            "module": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 193,
            "description": "Test a variable is a boolean",
            "itemtype": "method",
            "name": "isBoolean",
            "params": [
                {
                    "name": "u",
                    "description": "The variable to check",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "True if it's a boolean, false in other cases",
                "type": "Boolean"
            },
            "class": "a",
            "module": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 205,
            "description": "Test a variable is an array",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "ar",
                    "description": "The variable to check",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "True if it's an array, false in other cases",
                "type": "Boolean"
            },
            "class": "a",
            "module": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 217,
            "description": "Define the default ajax options to send on every request.\nAt any time, by providing good options, you can override this content on a single ajax request.",
            "itemtype": "method",
            "name": "setDefaultAjaxOptions",
            "params": [
                {
                    "name": "options",
                    "description": "The default options to set",
                    "type": "Object"
                }
            ],
            "class": "a",
            "module": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 231,
            "description": "Get the default ajax options currently stored (and used by every ajax request)",
            "itemtype": "method",
            "name": "getDefaultAjaxOptions",
            "return": {
                "description": "The default ajax options setted",
                "type": "Object"
            },
            "class": "a",
            "module": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 269,
            "description": "Output to console any given value. If console is not ready, the content will be stored into object, the list function allow to access stored content in this case",
            "itemtype": "method",
            "name": "__out",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "The type, like \"log\", \"warn\", \"info\", \"error\", ...",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to output",
                    "type": "Mixed"
                },
                {
                    "name": "level",
                    "description": "Indicate the message priority level, can be null",
                    "type": "Integer | null"
                },
                {
                    "name": "appear",
                    "description": "Indicate if the console should handle or not the message (mostly used for unit test...)",
                    "type": "Boolean | null"
                }
            ],
            "class": "a.console",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 352,
            "description": "Log data",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "value",
                    "description": "The value to log on debug",
                    "type": "Mixed"
                },
                {
                    "name": "level",
                    "description": "Indicate the message priority level, can be null",
                    "type": "Integer | null"
                },
                {
                    "name": "appear",
                    "description": "Indicate if the console should handle or not the message (mostly used for unit test...)",
                    "type": "Boolean | null"
                }
            ],
            "class": "a.console",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 363,
            "description": "Warning data",
            "itemtype": "method",
            "name": "warn",
            "params": [
                {
                    "name": "value",
                    "description": "The value to warning on debug",
                    "type": "Mixed"
                },
                {
                    "name": "level",
                    "description": "Indicate the message priority level, can be null",
                    "type": "Integer | null"
                },
                {
                    "name": "appear",
                    "description": "Indicate if the console should handle or not the message (mostly used for unit test...)",
                    "type": "Boolean | null"
                }
            ],
            "class": "a.console",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 374,
            "description": "Information data",
            "itemtype": "method",
            "name": "info",
            "params": [
                {
                    "name": "value",
                    "description": "The value to inform on debug",
                    "type": "Mixed"
                },
                {
                    "name": "level",
                    "description": "Indicate the message priority level, can be null",
                    "type": "Integer | null"
                },
                {
                    "name": "appear",
                    "description": "Indicate if the console should handle or not the message (mostly used for unit test...)",
                    "type": "Boolean | null"
                }
            ],
            "class": "a.console",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 385,
            "description": "Error data",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "value",
                    "description": "The value to error on debug",
                    "type": "Mixed"
                },
                {
                    "name": "level",
                    "description": "Indicate the message priority level, can be null",
                    "type": "Integer | null"
                },
                {
                    "name": "appear",
                    "description": "Indicate if the console should handle or not the message (mostly used for unit test...)",
                    "type": "Boolean | null"
                }
            ],
            "class": "a.console",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 396,
            "description": "List all currently stored content",
            "itemtype": "method",
            "name": "trace",
            "params": [
                {
                    "name": "type",
                    "description": "The string type (can be null)",
                    "type": "String | null"
                }
            ],
            "return": {
                "description": "The stored data, the object got 4 properties : log, info, warn, error"
            },
            "class": "a.console",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 408,
            "description": "Clear the stored content",
            "itemtype": "method",
            "name": "clear",
            "class": "a.console",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 433,
            "description": "Serialize a JSON into a string",
            "itemtype": "method",
            "name": "stringify",
            "params": [
                {
                    "name": "value",
                    "description": "Any data to be converted into String",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "A parsed string, or an empty string if the parsing fails",
                "type": "String"
            },
            "class": "a.parser.json",
            "module": "a",
            "namespace": "a.parser"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 450,
            "description": "Deserialize a string into JSON",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "value",
                    "description": "The value un-stringify",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The converted value",
                "type": "Mixed | null"
            },
            "class": "a.parser.json",
            "module": "a",
            "namespace": "a.parser"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 478,
            "description": "Serialize a XML into a string",
            "itemtype": "method",
            "name": "stringify",
            "params": [
                {
                    "name": "value",
                    "description": "Any data to be converted into String",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "A parsed string, or an empty string if the parsing fails",
                "type": "String"
            },
            "class": "a.parser.xml",
            "module": "a",
            "namespace": "a.parser"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 501,
            "description": "Deserialize a string into XML",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "value",
                    "description": "The value un-stringify",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The resulting doc element (null in case of problem)",
                "type": "DOCElement | null"
            },
            "class": "a.parser.xml",
            "module": "a",
            "namespace": "a.parser"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 558,
            "description": "Clear the unused (empty) types",
            "itemtype": "method",
            "name": "__clearEventType",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "The type associated with current clearing",
                    "type": "String"
                }
            ],
            "class": "a.eventEmitter",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 575,
            "description": "Set the name of event root type, you can specify your own \"root name\" to identify more easily the event emitter",
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "name",
                    "description": "The name to set (default is \"a.message\")",
                    "type": "String"
                }
            ],
            "class": "a.eventEmitter",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 586,
            "description": "Adding a listener to a specific message type",
            "itemtype": "method",
            "name": "addListener",
            "params": [
                {
                    "name": "type",
                    "description": "The event name",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "The function to attach",
                    "type": "Function"
                }
            ],
            "class": "a.eventEmitter",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 612,
            "description": "Adding a listener only one",
            "itemtype": "method",
            "name": "addListenerOnce",
            "params": [
                {
                    "name": "type",
                    "description": "The event name",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "The function to attach",
                    "type": "Function"
                }
            ],
            "class": "a.eventEmitter",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 631,
            "description": "Removing a listener to a specific message type",
            "itemtype": "method",
            "name": "removeListener",
            "params": [
                {
                    "name": "type",
                    "description": "The event name",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "The function to detach",
                    "type": "Function"
                }
            ],
            "class": "a.eventEmitter",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 665,
            "description": "Remove all listeners for a given type",
            "itemtype": "method",
            "name": "removeAllListeners",
            "params": [
                {
                    "name": "type",
                    "description": "The event type to remove",
                    "type": "String"
                }
            ],
            "class": "a.eventEmitter",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 682,
            "description": "Clear all listeners from all event type",
            "itemtype": "method",
            "name": "clear",
            "class": "a.eventEmitter",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 700,
            "description": "Call an event, according to it's type",
            "itemtype": "method",
            "name": "dispatch",
            "params": [
                {
                    "name": "type",
                    "description": "The event name to dispatch",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Anything you want to pass threw this event",
                    "type": "Object"
                }
            ],
            "class": "a.eventEmitter",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 769,
            "description": "Get the stored value, null if nothing is stored",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "A value to get",
                    "type": "String"
                }
            ],
            "class": "a.environment",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 783,
            "description": "Set the value to store",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "The key to store",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Some data to associate",
                    "type": "Mixed"
                }
            ],
            "class": "a.environment",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 805,
            "description": "Remove a value stored into environment",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "key",
                    "description": "The environment stored key to remove",
                    "type": "String"
                }
            ],
            "class": "a.environment",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 825,
            "description": "Clear the stored content (all of them)",
            "itemtype": "method",
            "name": "clear",
            "class": "a.environment",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 939,
            "description": "Parse the data to return the formated object (if needed)",
            "itemtype": "method",
            "name": "parseResult",
            "params": [
                {
                    "name": "params",
                    "description": "The parameter list from configuration ajax",
                    "type": "Object"
                },
                {
                    "name": "http",
                    "description": "The xmlHttpRequest started",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The parsed results",
                "type": "Object | String"
            },
            "class": "a.ajax",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 962,
            "description": "Manually abort the request",
            "itemtype": "method",
            "name": "abort",
            "class": "a.ajax",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 973,
            "description": "Send the ajax request",
            "itemtype": "method",
            "name": "send",
            "class": "a.ajax",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1086,
            "description": "Proceed timer tick",
            "itemtype": "method",
            "name": "__tick",
            "access": "private",
            "tagname": "",
            "class": "a.timer",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1115,
            "description": "Generate a new random",
            "itemtype": "method",
            "name": "__generate",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "A new integer generated"
            },
            "class": "a.timer",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1137,
            "description": "Register a function into timer tick",
            "itemtype": "method",
            "name": "add",
            "async": 1,
            "params": [
                {
                    "name": "fct",
                    "description": "The function to bind",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The scope to bind to function",
                    "type": "Object | null"
                },
                {
                    "name": "timeout",
                    "description": "The timeout when calling function",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "A generated id used to manipulate ticker access",
                "type": "Integer"
            },
            "class": "a.timer",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1165,
            "description": "Register a function for a single timer shot",
            "itemtype": "method",
            "name": "once",
            "async": 1,
            "params": [
                {
                    "name": "fct",
                    "description": "The function to bind",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The scope to bind to function",
                    "type": "Object | null"
                },
                {
                    "name": "timeout",
                    "description": "The timeout when calling function",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "A generated id used to manipulate ticker access",
                "type": "Integer"
            },
            "class": "a.timer",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1186,
            "description": "Get a function registred into the timer",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "The object linked to id, or null if nothing is found",
                "type": "Object | null"
            },
            "class": "a.timer",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1201,
            "description": "Remove a function registred into the timer",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "id",
                    "description": "The id to delete",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "The item has been delete or not",
                "type": "Boolean"
            },
            "class": "a.timer",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1218,
            "description": "Clear the current timer content",
            "itemtype": "method",
            "name": "clear",
            "class": "a.timer",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1252,
            "description": "Check the cache, and launch callback if uri is already listed in cache",
            "itemtype": "method",
            "name": "__checkCache",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "uri",
                    "description": "The path to access data",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to apply after loader",
                    "type": "Function | null"
                }
            ],
            "return": {
                "description": "True if it's already inside cache, and false in other case",
                "type": "Boolean"
            },
            "class": "a.loader",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1282,
            "description": "Insert into cache if needed the uri",
            "itemtype": "method",
            "name": "__populateCache",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "uri",
                    "description": "The path to access data",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "The arguments to check if cache is specified and policy to use",
                    "type": "Object"
                }
            ],
            "class": "a.loader",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1299,
            "description": "Append to header the given tag, used by JS and CSS loader especially",
            "itemtype": "method",
            "name": "__appendToHeader",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "el",
                    "description": "A createElement type result",
                    "type": "DOM"
                },
                {
                    "name": "options",
                    "description": "HTML Options to add to link appended",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to apply after loader",
                    "type": "Function | null"
                },
                {
                    "name": "uri",
                    "description": "The path to access data",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "The arguments to check if cache is specified and policy to use",
                    "type": "Object | null"
                },
                {
                    "name": "error",
                    "description": "The callback to raise in case of problem (never used)",
                    "type": "Function | null"
                }
            ],
            "class": "a.loader",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1371,
            "description": "load some data threw AJAX",
            "itemtype": "method",
            "name": "__ajaxLoader",
            "access": "private",
            "tagname": "",
            "async": 1,
            "params": [
                {
                    "name": "uri",
                    "description": "The data path",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to apply in case of success",
                    "type": "Function | null"
                },
                {
                    "name": "args",
                    "description": "An ajax argument object, not all of them are used (some are automatically generated and cannot be changed)",
                    "type": "Object | null"
                },
                {
                    "name": "error",
                    "description": "The callback to apply in case of error",
                    "type": "Function | null"
                }
            ],
            "class": "a.loader",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1427,
            "description": "Javascript loader",
            "itemtype": "method",
            "name": "js",
            "async": 1,
            "params": [
                {
                    "name": "uri",
                    "description": "The path to access content",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to call after loading success",
                    "type": "Function | null"
                },
                {
                    "name": "args",
                    "description": "An ajax argument object, not all of them are used (some are automatically generated and cannot be changed)",
                    "type": "Object"
                }
            ],
            "class": "a.loader",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1445,
            "description": "JSONP loader",
            "itemtype": "method",
            "name": "jsonp",
            "async": 1,
            "params": [
                {
                    "name": "uri",
                    "description": "The path to access content",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to call after loading success",
                    "type": "Function | null"
                },
                {
                    "name": "args",
                    "description": "An ajax argument object, not all of them are used (some are automatically generated and cannot be changed)",
                    "type": "Object"
                }
            ],
            "class": "a.loader",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1465,
            "description": "JSON loader",
            "itemtype": "method",
            "name": "json",
            "async": 1,
            "params": [
                {
                    "name": "uri",
                    "description": "The path to access content",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to call after loading success",
                    "type": "Function | null"
                },
                {
                    "name": "args",
                    "description": "An ajax argument object, not all of them are used (some are automatically generated and cannot be changed)",
                    "type": "Object"
                }
            ],
            "class": "a.loader",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1491,
            "description": "XML loader",
            "itemtype": "method",
            "name": "xml",
            "async": 1,
            "params": [
                {
                    "name": "uri",
                    "description": "The path to access content",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to call after loading success",
                    "type": "Function | null"
                },
                {
                    "name": "args",
                    "description": "An ajax argument object, not all of them are used (some are automatically generated and cannot be changed)",
                    "type": "Object"
                }
            ],
            "class": "a.loader",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1517,
            "description": "CSS loader",
            "itemtype": "method",
            "name": "css",
            "async": 1,
            "params": [
                {
                    "name": "uri",
                    "description": "The path to access content",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to call after loading success",
                    "type": "Function | null"
                },
                {
                    "name": "args",
                    "description": "An ajax argument object, not all of them are used (some are automatically generated and cannot be changed)",
                    "type": "Object"
                }
            ],
            "class": "a.loader",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1541,
            "description": "HTML loader\nNOTE : only valid XHTML is accepted !",
            "itemtype": "method",
            "name": "html",
            "async": 1,
            "params": [
                {
                    "name": "uri",
                    "description": "The path to access content",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to call after loading success",
                    "type": "Function | null"
                },
                {
                    "name": "args",
                    "description": "An ajax argument object, not all of them are used (some are automatically generated and cannot be changed)",
                    "type": "Object"
                }
            ],
            "class": "a.loader",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1576,
            "description": "JavaFX loader",
            "itemtype": "method",
            "name": "javafx",
            "async": 1,
            "params": [
                {
                    "name": "uri",
                    "description": "The path for given jar files to load",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to call after loading success",
                    "type": "Function | null"
                },
                {
                    "name": "args",
                    "description": "An object to set property for javaFX (like javascript name...), we need : args.code (the main to start), args.id (the id of project). args.width and height are optional",
                    "type": "Object"
                }
            ],
            "class": "a.loader",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1625,
            "description": "Flash loader",
            "itemtype": "method",
            "name": "flash",
            "async": 1,
            "params": [
                {
                    "name": "uri",
                    "description": "The path for given swf files to load",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to call after loading success",
                    "type": "Function | null"
                },
                {
                    "name": "args",
                    "description": "An object to set property for Flash",
                    "type": "Object"
                }
            ],
            "class": "a.loader",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1658,
            "description": "Silverlight loader",
            "itemtype": "method",
            "name": "silverlight",
            "async": 1,
            "params": [
                {
                    "name": "uri",
                    "description": "The path for given xap files to load",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to call after loading success (NOTE : silverlight is not able to fire load event, so it's not true here...)",
                    "type": "Function | null"
                },
                {
                    "name": "args",
                    "description": "An object to set property for Silverlight",
                    "type": "Object"
                }
            ],
            "class": "a.loader",
            "module": "a",
            "namespace": "a"
        },
        {
            "file": "..\\git\\appstorm\\a.js",
            "line": 1713,
            "description": "Get the cache trace loaded",
            "itemtype": "method",
            "name": "trace",
            "return": {
                "description": "The cache trace",
                "type": "Array"
            },
            "class": "a.loader",
            "module": "a",
            "namespace": "a"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nSet the a.language behavior",
            "line": " ..\\git\\appstorm\\plugin\\language.js:372"
        }
    ]
}